package utils;

import java.security.SecureRandom;

/**
 * A simple and secure session key generator that embeds a numeric prefix (e.g., user ID)
 * into the generated key string.
 *
 * <p>The generated key has the following format:
 * <pre>
 * [hex-length][encoded-prefix][random-suffix]
 * </pre>
 *
 * Where:
 * <ul>
 *   <li>The first character is the hexadecimal representation of the digit length of the prefix.</li>
 *   <li>The next few characters are the ASCII digits of the prefix, each shifted by 'A' (to avoid digits in this segment).</li>
 *   <li>The remaining characters are randomly selected from alphanumeric characters.</li>
 * </ul>
 *
 * <p>Example: prefix=123, length=12 → key like "3DCEg7aB2x9K"
 * <ul>
 *   <li>'3' → prefix has 3 digits</li>
 *   <li>'D','C','E' → '1'+'A', '2'+'A', '3'+'A'</li>
 *   <li>'g7aB2x9K' → random suffix</li>
 * </ul>
 *
 * <p>This design allows the original prefix to be extracted later without storing it separately.
 */
public final class SimpleSessionKeyGenerator {

    /**
     * Character set used for the random suffix of the session key.
     * Includes digits, lowercase and uppercase letters (62 total).
     */
    private static final char[] CANDIDATE_CHARS =
            "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();

    /**
     * Default length of the generated session key (including prefix encoding).
     */
    private static final int DEFAULT_LENGTH = 12;

    /**
     * Cryptographically strong random number generator for generating random characters.
     */
    private static final SecureRandom RAND = new SecureRandom();

    // Private constructor to prevent instantiation (utility class)
    private SimpleSessionKeyGenerator() {}

    /**
     * Generates a session key with the given numeric prefix and the default length.
     *
     * @param prefix the numeric identifier to embed (e.g., user ID, session ID)
     * @return a session key string containing the encoded prefix and random suffix
     */
    public static String generateSessionKey(int prefix) {
        return generateSessionKey(prefix, DEFAULT_LENGTH);
    }

    /**
     * Generates a session key with the given numeric prefix and specified length.
     *
     * @param prefix the numeric identifier to embed
     * @param length the total length of the generated key (must be sufficient to hold prefix encoding)
     * @return a session key string
     * @throws IllegalArgumentException if length is too small to encode the prefix
     */
    public static String generateSessionKey(int prefix, int length) {
        String prefixStr = String.valueOf(prefix);
        int prefixLen    = prefixStr.length();

        char[] buf = new char[length];
        int pos = 0;

        // Step 1: Encode the length of the prefix as a single hex digit (0-9a-f)
        // This allows us to know how many characters to read for the prefix
        buf[pos++] = Integer.toHexString(prefixLen).charAt(0);

        // Step 2: Encode each digit of the prefix by shifting it up by 'A'
        // This avoids having raw digits in this segment, reducing predictability
        for (int i = 0; i < prefixLen; i++) {
            buf[pos++] = (char) (prefixStr.charAt(i) + 'A');
        }

        // Step 3: Fill the rest with random characters from CANDIDATE_CHARS
        while (pos < length) {
            buf[pos++] = CANDIDATE_CHARS[RAND.nextInt(CANDIDATE_CHARS.length)];
        }

        return new String(buf);
    }

    /**
     * Parses and extracts the original numeric prefix from a session key generated by this class.
     *
     * @param sessionKey the session key string (must be non-null and valid format)
     * @return the original numeric prefix
     * @throws IllegalArgumentException if the key is invalid or corrupted
     * @throws NumberFormatException if the decoded prefix string is not a valid integer
     */
    public static int parsePrefix(String sessionKey) {
        int len = Character.digit(sessionKey.charAt(0), 16);
        char[] digitChars = new char[len];
        for (int i = 0; i < len; i++) {
            digitChars[i] = (char) (sessionKey.charAt(1 + i) - 'A');
        }
        return Integer.parseInt(new String(digitChars));
    }
}
